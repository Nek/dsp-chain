
use sound_stream_settings::SoundStreamSettings;
use std::rc::Rc;
use std::cell::RefCell;
use std::fmt::Formatter;
use std::fmt::Result;
use std::fmt::Show;


/// Active for a usable node, deactive otherwise.
pub enum NodeState<'a> {
    Active(&'a IsNode),
    MutActive(&'a mut IsNode),
    Deactive
}


/// The mixer input for handling volume and
/// panning of incoming audio from inputs.
#[deriving(Clone)]
pub struct MixerInput<T> {
    node: Rc<RefCell<T>>,
    vol: f32, 
    pan: f32,
}

/// Need to explicitly implement Show due to
/// Rc pointer.
impl<T: IsNode> Show for MixerInput<T> {
    fn fmt(&self, f: &mut Formatter) -> Result {
        write!(f, "vol: {}, pan{}", self.vol, self.pan)
    }
}

impl<T: IsNode> MixerInput<T> {
    /// Constructor for a Mixer Input.
    pub fn new(node: Rc<RefCell<T>>) -> MixerInput<T> {
        MixerInput {
            node: node,
            vol: 1f32,
            pan: 0f32
        }
    }
}

/// The DSP Node contains a vector of children
/// nodes (within the `MixerInput`s), from which
/// audio can be requested as well as the current
/// SoundStream settings.
#[deriving(Show, Clone)]
pub struct Node<T> {
    inputs: Vec<MixerInput<T>>,
    /// SoundStreamSettings for buffer calculations.
    pub settings: SoundStreamSettings,
    /// Master volume for DSP node.
    pub master_vol: f32
}

/// A placeholder for a deactive node state.
#[deriving(Show, Clone)]
pub struct EndNode;

/// DSP Node trait. Implement this for any audio
/// instrument or effects types. Be sure to add
/// the `Node` struct to a field as well, and
/// override the `get_node` and `get_node_mut`
/// methods by returning a ref (/mut) to it.
pub trait IsNode: Clone {

    /// Return a reference to the Node. Return None for EndNode.
    fn get_node<'a>(&'a self) -> NodeState;
    /// Return a mutable reference to the Node. Return None for EndNode.
    fn get_node_mut<'a>(&'a mut self) -> NodeState;

    /// Apply settings to self and all inputs.
    fn apply_settings<T: IsNode>(&mut self, settings: SoundStreamSettings) {
        match self.get_node_mut() {
            MutActive(node) => {
                let inputs: &Vec<MixerInput<T>> = &node.inputs;
                for input in inputs.iter() {
                    input.node.borrow_mut().apply_settings::<T>(settings);
                }
                node.settings = settings;
            },
            _ => return
        }
    }
    
    /// Add a new input.
    fn add_input<T: IsNode>(&mut self, input: Rc<RefCell<T>>) {
        match self.get_node_mut() {
            MutActive(node) => {
                node.inputs.push(MixerInput::new::<T>(input))
            },
            _ => return
        }
    }

    /// Remove an input. Find the input by comparing
    /// the address of the given input to each of the
    /// inputs' addresses.
    fn remove_input(&mut self, to_remove: &Rc<RefCell<Node>>) {
        match self.get_node_mut() {
            MutActive(node) => {
                for i in range(0, node.inputs.len()) {
                    if &(*node.inputs.get(i).node.borrow()) as *_ ==
                        &(*to_remove.borrow()) as *_ {
                        node.inputs.remove(i);
                        break;
                    }
                }
            },
            _ => return
        }
    }

    /// Remove all inputs from the `inputs` vector.
    fn remove_all_inputs(&mut self) {
        match self.get_node_mut() {
            MutActive(node) => { node.inputs.clear(); },
            _ => return
        }
    }

    /// Add all inputs held by another node.
    fn add_inputs_from<T: IsNode>(&mut self, other: &Rc<RefCell<T>>) {
        match self.get_node_mut() {
            MutActive(node) => {
                node.inputs.push_all(other.borrow().get_node().inputs.as_slice());
            },
            _ => return
        }
    }

    /// Receive incoming audio (override this
    /// to do something with the input).
    fn audio_received(&mut self, input: &Vec<f32>) {}

    /// Request audio from inputs, process and
    /// pass back to the output! Override this
    /// method for any synthesis or generative
    /// types.
    fn audio_requested(&mut self, output: &mut Vec<f32>) {
        match self.get_node_mut() {
            MutActive(node) => {
                let master_vol = node.master_vol;
                let frames = node.settings.frames as uint;
                let channels = node.settings.channels as uint;
                let mut vol_per_channel: Vec<f32> = Vec::from_elem(channels, 1f32);
                for i in range(0, node.inputs.len()) {
                    let input = node.inputs.get(i);
                    let mut working: Vec<f32> =
                        Vec::from_elem((frames * channels) as uint, 0f32);

                    // Call audio_requested for each input.
                    input.node.borrow_mut().get_node_mut().audio_requested(&mut working);

                    // Construct precalculated volume and
                    // pan array (for efficiency).
                    let vol_l: f32 = input.vol * (1f32 - input.pan);
                    let vol_r: f32 = input.vol * input.pan;
                    for j in range(0, vol_per_channel.len()) {
                        *vol_per_channel.get_mut(j) =
                            if j == 0 { vol_l } else { vol_r } * master_vol;
                    }

                    // Sum all input nodes to output (considering
                    // pan, vol and interleaving).
                    for j in range(0, frames) {
                        for k in range(0, channels) {
                            *output.get_mut(j * channels + k) +=
                                *working.get(j * channels + k) * *vol_per_channel.get(k);
                        }
                    }
                }
                // Custom buffer processing.
                node.process_buffer(output);
            },
            _ => return
        }
    }


    /// Override for custom processing of audio per
    /// buffer. This is mainly for audio effects. Get's
    /// called at the end of audio_requested.
    fn process_buffer(&mut self, output: &mut Vec<f32>) {}

}

/// We only have to implement these two methods
/// for any of our types that derive from our
/// `IsNode` DSP node trait.
impl IsNode for Node {
    fn get_node<'a>(&'a self) -> NodeState<'a> { Active(self) }
    fn get_node_mut<'a>(&'a mut self) -> NodeState<'a> { MutActive(self) }
}

/// We only have to implement these two methods
/// for any of our types that derive from our
/// `IsNode` DSP node trait.
impl IsNode for EndNode {
    fn get_node<'a>(&'a self) -> NodeState<'a> { Deactive }
    fn get_node_mut<'a>(&'a mut self) -> NodeState<'a> { Deactive }
}

impl Node {
    /// Constructor for the DSP Node.
    pub fn new(settings: SoundStreamSettings) -> Node {
        Node {
            inputs: Vec::new(),
            settings: settings,
            master_vol: 1f32
        }
    }
}

